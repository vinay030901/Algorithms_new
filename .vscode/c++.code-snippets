{
  // Place your Algorithms_new workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "C++ Program": {
    "prefix": "cppprogram",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "int main() {",
      "    // Your code here",
      "    return 0;",
      "}"
    ],
    "description": "Create a basic C++ program"
  },
  "Linkedlist Cpp program": {
    "prefix": "linkedlist",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "struct ListNode",
      "{",
      "int val;",
      "ListNode *next;",
      "ListNode() : val(0), next(nullptr) {}",
      "ListNode(int x) : val(x), next(nullptr) {}",
      "};",
      "int main() {",
      "    // Your code here",
      "    return 0;",
      "}"
    ],
    "description": "Log output to console"
  },
  "Binary tree Cpp program": {
    "prefix": "binaryTree",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "struct TreeNode",
      "{",
      "int val;",
      "TreeNode *left;",
      "TreeNode *right;",
      "TreeNode(int x) : val(x), left(NULL), right(NULL) {}",
      "};",
      "int main() {",
      "    // Your code here",
      "    return 0;",
      "}"
    ],
    "description": "Log output to console"
  }
}
